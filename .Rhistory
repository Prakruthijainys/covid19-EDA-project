```
new columns "year" and "month" is added ang grouping that data by moth and year
```{r}
##seperate date into month and year
data = data %>% mutate(year = year(Date), month = month(Date)) %>% group_by(year, month)
##stem with conditional statement
with(data, stem(data$Confirmed[data$year == "2020"]))
```
plotting bargraph month vs confirmed and adding labels
```{r}
##adding labels to a bar graph
ggplot(data, aes(x= month, y=Confirmed)) + geom_col() + geom_text(aes(label = Confirmed), vjust = -0.2)
ggplot(data, aes(x= month, y=Confirmed)) + geom_col() + geom_text(aes(label = Confirmed), vjust = 1.5, colour = "white")
```
col() function gets the column number of a matrix
```{r}
col(data, as.factor = FALSE)
x <- matrix(rep(1:9),3,3)
col(x)
```
```{r}
x = data[ , 1:2]
```
```{r}
x = data[ , :2]
```
```{r}
x = data[ , 3:2]
```
```{r}
x = data[ , 1:2]
```
```{r}
x = data[ , o:2]
```
```{r}
x = data[ , 09:2]
```
```{r}
x = data[ , 0:2]
```
View(x)
View(x)
```{r}
x = data[ , 2:3]
```
View(x)
col() function gets the column number of a matrix
```{r}
col(data, as.factor = FALSE)
y <- matrix(rep(1:9),3,3)
col(y)
```
```{r}
x = data[ , 2:3]
```
```{r}
x = data[ , 2:3]
head(x)
```
```{r}
colmeans(x)
```
```{r}
colMeans(x)
```
```{r}
colMeans(x)
rowMeans(x)
```
```{r}
colMeans(x)
rowMeans(x)
colSums(x)
rowSums(x)
```
```{r}
apply(data[ , 2:3],2,mean)
```
colMeans() function gives mean value of the columns in the dataset
rowMeans() function gives mean value of the rows in the dataset
colSums() and rowSums() gives the sums of matrix or array columns
```{r}
colMeans(x)
rowMeans(x)
colSums(x)
rowSums(x)
```
apply() function used to apply a function across an array, matrix or dataframe
```{r}
apply(data[ , 2:3], 2 , mean)
apply(data[ , 2:3], 1 , mean)
```
colMeans() function gives mean value of the columns in the dataset
rowMeans() function gives mean value of the rows in the dataset
colSums() and rowSums() gives the sums of matrix or array columns
```{r}
colMeans(x)
rowMeans(x)
colSums(x)
rowSums(x)
```
apply() function used to apply a function across an array, matrix or dataframe
```{r}
##vmean on columns
apply(data[ , 2:3], 2 , mean)
##mean on rows
apply(data[ , 2:3], 1 , mean)
##median
apply(data[ , 2:3], 2 , median)
##variance
apply(data[ , 2:3], 2 , var)
```
```{r}
head(na.omit(data))
```
na.omit() function removes all incomplete cases of a dataobject
```{r}
head(na.omit(data))
```
```{r}
objects(data)
```
```{r}
ls(data)
```
```{r}
lm(Confirmed ~ month, data)
```
```{r}
data_regr = lm(Confirmed ~ month, data)
data_regr
```
View(data_regr)
View(data_regr)
View(data_regr)
View(data_regr)
Simple linear Regression
lm() function can be used to determine the beta coefficients of liner model
```{r}
data_regr = lm(Confirmed ~ month, data)
data_regr
ggplot(data, aes(month,Confirmed)) + geom_point() + stat_smooth(method = lm)
```
Simple linear Regression
lm() function can be used to determine the beta coefficients of liner model
```{r}
data_regr = lm(Confirmed ~ month, data)
data_regr
ggplot(data, aes(year,Confirmed)) + geom_point() + stat_smooth(method = lm)
```
Simple linear Regression
lm() function can be used to determine the beta coefficients of liner model
```{r}
data_regr = lm(Confirmed ~ month, data)
data_regr
ggplot(data, aes(Date,Confirmed)) + geom_point() + stat_smooth(method = lm)
```
month
Simple linear Regression
lm() function can be used to determine the beta coefficients of liner model
```{r}
data_regr = lm(Confirmed ~ month, data)
data_regr
ggplot(data, aes(month,Confirmed)) + geom_point() + stat_smooth(method = lm)
```
Simple linear Regression
lm() function can be used to determine the beta coefficients of liner model
```{r}
data_regr = lm(Confirmed ~ month, data)
data_regr
ggplot(data, aes(month,Confirmed)) + geom_point() + stat_smooth(method = lm)
summary(model)
```
Simple linear Regression
lm() function can be used to determine the beta coefficients of liner model
```{r}
data_regr = lm(Confirmed ~ month, data)
data_regr
ggplot(data, aes(month,Confirmed)) + geom_point() + stat_smooth(method = lm)
summary(data_regr)
```
Simple linear Regression
lm() function can be used to determine the beta coefficients of liner model
```{r}
data_regr = lm(Confirmed ~ month, data)
data_regr
ggplot(data, aes(month,Confirmed)) + geom_point() + stat_smooth(method = lm)
summary(data_regr)
confint(data_regr)
```
Simple linear Regression
lm() function can be used to determine the beta coefficients of liner model
```{r}
data_regr = lm(month~ Confirmed, data)
data_regr
ggplot(data, aes(month,Confirmed)) + geom_point() + stat_smooth(method = lm)
summary(data_regr)
confint(data)
```
Simple linear Regression
lm() function can be used to determine the beta coefficients of liner model
```{r}
data_regr = lm(month ~ Confirmed, data)
data_regr
ggplot(data, aes(month,Confirmed)) + geom_point() + stat_smooth(method = lm)
summary(data_regr)
confint(data_regr)
```
Simple linear Regression
lm() function can be used to determine the beta coefficients of liner model
```{r}
data_regr = lm(month ~ Confirmed, data)
data_regr
ggplot(data, aes(month,Confirmed)) + geom_point() + stat_smooth(method = lm)
summary(data_regr)
confint(data_regr)
sigma(data_regr)*100/mean(Confirmed)
```
Simple linear Regression
lm() function can be used to determine the beta coefficients of liner model
```{r}
data_regr = lm(month ~ Confirmed, data)
data_regr
ggplot(data, aes(month,Confirmed)) + geom_point() + stat_smooth(method = lm)
summary(data_regr)
confint(data_regr)
sigma(data_regr)*100/mean(month)
```
Simple linear Regression
lm() function can be used to determine the beta coefficients of liner model
```{r}
data_regr = lm(month ~ Confirmed, data)
data_regr
ggplot(data, aes(month,Confirmed)) + geom_point() + stat_smooth(method = lm)
summary(data_regr)
confint(data_regr)
sigma(data_regr)*100/mean(Confirmed)
```
```{r}
ggplot(data, aes(x = month, y = Confirmed, fill = year)) + geom_area()
```
```{r}
ggplot(data, aes(x = month, y = Confirmed, fill = year)) + geom_area()
```
Simple linear Regression
lm() function can be used to determine the beta coefficients of liner model
```{r}
data_regr = lm(month ~ Confirmed, data)
data_regr
##summary
summary(data_regr)
##confidence interval
confint(data_regr)
cor.test(data$Confirmed + data$month)
Simple linear Regression
lm() function can be used to determine the beta coefficients of liner model
```{r}
data_regr = lm(month ~ Confirmed, data)
data_regr
##summary
summary(data_regr)
##confidence interval
confint(data_regr)
cor.test( ~ data$Confirmed + data$month)
Simple linear Regression
lm() function can be used to determine the beta coefficients of liner model
```{r}
data_regr = lm(month ~ Confirmed, data)
data_regr
##summary
summary(data_regr)
##confidence interval
confint(data_regr)
cor.test( ~ data$Confirmed + data$month)
coef(data_regr)
fitted values
```{r}
head(fitted(data_regr))
```
Residuals
```{r}
head(residuals(data_regr))
```
Formula
```{r}
formula(data_regr)
```
Formula
```{r}
formula(data_regr)
formula(data)
```
Formula
```{r}
formula(data_regr)
formula(data)
data_regr$call
```
```{r}
meandata = apply(data[ , 2:3], 2, mean)
```{r}
meandata = apply(data[ , 2:3], 2, mean)
meandata
```
```{r}
meandata = apply(data[ , 2:3], 2, mean)
meandata
sd_data = apply(data[, 2:3], 2, sd)
sd_data
sumdata = apply(data[ , 2:3], 2, sum)
sumdata
```
```{r}
meandata = apply(data[ , 2:3], 2, mean)
meandata
sd_data = apply(data[, 2:3], 2, sd)
sd_data
sumdata = apply(data[ , 2:3], 2, sum)
sumdata
df = sumdata/meandata
```
```{r}
meandata = apply(data[ , 2:3], 2, mean)
meandata
sd_data = apply(data[, 2:3], 2, sd)
sd_data
sumdata = apply(data[ , 2:3], 2, sum)
sumdata
df = sumdata/meandata
df
```
using segments() command for Error Bars
```{r}
meandata = apply(data[ , 2:3], 2, mean)
meandata
sd_data = apply(data[, 2:3], 2, sd)
sd_data
sumdata = apply(data[ , 2:3], 2, sum)
sumdata
df = sumdata/meandata
df
meandata + df
```
using segments() command for Error Bars
```{r}
meandata = apply(data[ , 2:3], 2, mean)
meandata
sd_data = apply(data[, 2:3], 2, sd)
sd_data
sumdata = apply(data[ , 2:3], 2, sum)
sumdata
df = sumdata/meandata
df
meandata + df
max(meandata + df)
```
using segments() command for Error Bars
```{r}
meandata = apply(data[ , 2:3], 2, mean)
meandata
sd_data = apply(data[, 2:3], 2, sd)
sd_data
sumdata = apply(data[ , 2:3], 2, sum)
sumdata
df = sumdata/meandata
df
meandata + df
max(meandata + df)
maxdata = round(max(meandata + df) + 0.5 , 0)
maxdata
```
using segments() command for Error Bars
```{r}
meandata = apply(data[ , 2:3], 2, mean)
meandata
sd_data = apply(data[, 2:3], 2, sd)
sd_data
sumdata = apply(data[ , 2:3], 2, sum)
sumdata
df = sumdata/meandata
df
meandata + df
max(meandata + df)
maxdata = round(max(meandata + df) + 0.5 , 0)
maxdata
barplot(meandata , ylim = c(0 , maxdata))
```
using segments() command for Error Bars
```{r}
meandata = apply(data[ , 2:3], 2, mean)
meandata
sd_data = apply(data[, 2:3], 2, sd)
sd_data
sumdata = apply(data[ , 2:3], 2, sum)
sumdata
df = sumdata/meandata
df
meandata + df
max(meandata + df)
maxdata = round(max(meandata + df) + 0.5 , 0)
maxdata
plot = barplot(meandata , ylim = c(0 , maxdata))
plot
```
using segments() command for Error Bars
```{r}
meandata = apply(data[ , 2:3], 2, mean)
meandata
sd_data = apply(data[, 2:3], 2, sd)
sd_data
sumdata = apply(data[ , 2:3], 2, sum)
sumdata
df = sumdata/meandata
df
meandata + df
max(meandata + df)
maxdata = round(max(meandata + df) + 0.5 , 0)
maxdata
plot = barplot(meandata , ylim = c(0 , maxdata))
plot
segments(plot , meandata + df, plot + 0.2, meandata - df)
box()
title(ylab = "count")
```
using segments() command for Error Bars
```{r}
meandata = apply(data[ , 2:3], 2, mean)
meandata
sd_data = apply(data[, 2:3], 2, sd)
sd_data
sumdata = apply(data[ , 2:3], 2, sum)
sumdata
df = sumdata/meandata
df
meandata + df
max(meandata + df)
maxdata = round(max(meandata + df) + 0.5 , 0)
maxdata
plot = barplot(meandata , ylim = c(0 , maxdata))
plot
segments(plot , meandata + df, plot , meandata - df)
segments(plot - 0.2, meandata - df, plot + 0.2, meandata - df)
box()
title(ylab = "count")
```
Creating mathematical expressions
```{r}
plot(1:10 , 1:10, type = 'n')
```
Creating mathematical expressions
```{r}
plot(1:10 , 1:10, type = 'n')
opt = par(cex = 1.5)
text(1 , 1, expresion(hat(x)))
text(2 , 2, expression(alpha == x))
text(3 , 3, expression(beta == y))
text(4 , 4, expression(frac(x, y)))
text(5 , 5, expression(sum(x)))
text(6 , 6, expression(sum(x^2)))
text(7 , 7, expression(bar(x) == sum(frac(x[i], n), i==1, n)))
text(8 , 8, expression(sqrt(x)))
text(9 , 9, expression(sqrt(x , 3)))
```
```{r}
tapply(data$Confirmed, data$month, FUN = mean)
```
```{r}
tapply(data$Confirmed, data$year, FUN = mean)
```
```{r}
tapply(data$Confirmed, data$year, FUN = mean)
tapply(data$Confirmed, data$year, FUN = var)
```{r}
tapply(data$Confirmed, data$year, FUN = mean)
tapply(data$Confirmed, data$year, FUN = var)
tapply(data$Confirmed, data$year, FUN = sd)
```{r}
tapply(data$Confirmed, data$year, FUN = mean)
tapply(data$Confirmed, data$year, FUN = var)
tapply(data$Confirmed, data$year, FUN = sd)
tapply(data$Confirmed, data$year, FUN = median)
```{r}
aggrerate(data[ , 2:3], by = list(data$Confirmed), FUN = mean)
```
```{r}
aggregate(data[ , 2:3], by = list(data$Confirmed), FUN = mean)
```
```{r}
aggregate(cbind(data$Confirmed, data$month), by = list(data$year), FUN = mean)
```
```{r}
aggregate(data[ , 2:3], by = list(data$Confirmed), FUN = mean)
aggregate(data$Confirmed ~ data$month, FUN = mean)
```
```{r}
aggregate(data[ , 2:3], by = list(data$Confirmed), FUN = mean)
aggregate(data$Confirmed ~ data$month, FUN = mean)
aggregate(data$Confirmed ~ data$month * data$year, FUN = mean)
```
aggregate() function splits the data into subsets and computes summary statistics for each subsets and returns the result in agroup by form
```{r}
aggregate(data[ , 2:3], by = list(data$Confirmed), FUN = mean)
aggregate(data$Confirmed ~ data$month, FUN = mean)
aggregate(data$Confirmed ~ data$month * data$year, FUN = mean)
aggregate(cbind(data$Confirmed, data$month), by = list(data$year), FUN = mean)
```
Load dataset
```{r}
##loading dataset
data=read.csv("Covid 19 Confirmed Cases-Kerala.csv")
```
